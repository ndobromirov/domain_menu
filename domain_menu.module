<?php

/**
 * Implements hook_permission()
 *
 * Used to add a new domain level permission to manage menu and menu items.
 *
 * @return array
 */
function domain_menu_permission() {
  return array(
    'administer menus on assigned domains' => array(
      'title' => t('Administer menus and menu items on assigned domains'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Used to change the core's menu module access callbacks.
 *
 * @param array $items
 *   List of already defined menu items.
 */
function domain_menu_menu_alter(&$items) {
  // Global paths.
  // Ignored paths: '/add', '/settings'
  foreach (array('', '/parents', '/list') as $path) {
    $path = "admin/structure/menu{$path}";
    if (isset($items[$path])) {
      $items[$path]['access callback'] = 'domain_menu_access_generic';
      $items[$path]['access arguments'] = array();
    }
  }

  // Menu paths.
  // Ignored paths: '/delete'
  foreach (array('', '/list', '/add', '/edit') as $path) {
    $path = "admin/structure/menu/manage/%menu{$path}";
    if (isset($items[$path])) {
      $items[$path]['access callback'] = 'domain_menu_access_menu';
      $items[$path]['access arguments'] = array(4);
    }
  }

  // Menu-item paths.
  foreach (array('edit', 'reset', 'delete') as $path) {
    $path = "admin/structure/menu/item/%menu_link/{$path}";
    if (isset($items[$path])) {
      $items[$path]['access callback'] = 'domain_menu_access_menu_item';
      $items[$path]['access arguments'] = array(4);
    }
  }

  // Overwrite the admin overview page to filter the list based on access.
  $items['admin/structure/menu']['page callback'] = 'domain_menu_overview_page';
}

/**
 * Shows the menus overview page.
 *
 * Adds a filter based on accessible menu records.
 *
 * @see menu_overview_page()
 *
 * @return string
 *   Rendered page output.
 * @throws Exception
 */
function domain_menu_overview_page() {
  $rows = array();
  $result = db_query("SELECT * FROM {menu_custom} ORDER BY title", array(), array('fetch' => PDO::FETCH_ASSOC));
  $header = array(t('Title'), array('data' => t('Operations'), 'colspan' => '3'));

  foreach ($result as $menu) {
    // Do not render menus we do not have access for.
    if (!domain_menu_access_menu($menu)) {
      continue;
    }
    $row = array();
    $row[] = theme('menu_admin_overview', array(
      'title' => $menu['title'],
      'name' => $menu['menu_name'],
      'description' => $menu['description'],
    ));
    $row[] = array('data' => l(t('list links'), 'admin/structure/menu/manage/' . $menu['menu_name']));
    $row[] = array('data' => l(t('edit menu'), 'admin/structure/menu/manage/' . $menu['menu_name'] . '/edit'));
    $row[] = array('data' => l(t('add link'), 'admin/structure/menu/manage/' . $menu['menu_name'] . '/add'));
    $rows[] = $row;
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Adds domain-level access on menus field-set.
 *
 * @see menu_form_node_form_alter()
 *
 * @param $form
 * @param $form_state
 */
function domain_menu_form_node_form_alter(&$form, $form_state) {
  // Short-hand to the access flag.
  $access = &$form['menu']['#access'];

  // Do not calculate anything if we do not have access.
  if (!($access = domain_menu_access_generic())) {
    return;
  }

  // Generate the options we have access to.
  $menu_names = call_user_func(function() {
    $menus = array_filter(menu_load_all(), 'domain_menu_access_menu');
    $menu_names = array_keys($menus);
    $menu_titles = array_map('menu_overview_title', $menus);
    $result = array_combine($menu_names, $menu_titles);
    return $result;
  });

  // Deny access when there are no accessible menus.
  if (empty($menu_names)) {
    $access = false;
    return;
  }

  // Overwrite the parents selector options.
  $link = $form['#node']->menu;
  $type = $form['#node']->type;
  $new_options = menu_parent_options($menu_names, $link['mlid'] ? $link : $type);
  $form['menu']['link']['parent']['#options'] = $new_options;
}

/**
 * Generic page-level access.
 *
 * @return bool
 *   Access result.
 */
function domain_menu_access_generic() {
  return _domain_menu_access_util(function($user) {
    // Allow access based on the new permission and domain configurations.
    $user_domains = _domain_menu_get_user_domains();
    $has_domain = ($domain = domain_get_domain()) && isset($user_domains[$domain['domain_id']]);
    $access = $has_domain && user_access('administer menus on assigned domains', $user);

    return $access;
  });
}

/**
 * Access utility on menu level.
 *
 * @param array $menu
 *   Menu instance as loaded from menu_load().
 *
 * @return bool
 *   Access result.
 */
function domain_menu_access_menu($menu) {
  return _domain_menu_access_util(function($user) use ($menu) {
    // Allow access based on match between MENU and USER domains.
    $user_domains = _domain_menu_get_user_domains();
    $menu_domains = domain_menu_get_settings($menu['menu_name']);
    $matching_domains = array_intersect($user_domains, $menu_domains);
    $access = !empty($matching_domains) && user_access('administer menus on assigned domains', $user);

    return $access;
  });
}

/**
 * Access utility on menu-item level.
 *
 * @param array $menu_item
 *   Menu item data structure.
 *
 * @return bool
 *   Access result.
 */
function domain_menu_access_menu_item($menu_item) {
  return _domain_menu_access_util(function($user) use ($menu_item) {
    $menu = menu_load($menu_item['menu_name']);
    $access = $menu ? domain_menu_access_menu($menu) : FALSE;
    return $access;
  });
}

/**
 * Internal helper that manages access checks on the module.
 *
 * Validates access based on global permission from menu module and a custom
 * callback parameter.
 *
 * @param callable $callback
 *   Custom callback that will decide the user's access. It is getting a
 *   single argument - the current system's user.
 *
 * @return bool
 *   TRUE when access is allowed.
 */
function _domain_menu_access_util($callback) {
  $access = FALSE
    // Maintain core behavior - global permission is a pass.
    || user_access('administer menu', $GLOBALS['user'])
    // Have a custom check
    || call_user_func($callback, $GLOBALS['user']);

  return $access;
}

/**
 * Fetch user domains.
 *
 * Static cache around the original implementation from domain module.
 *
 * @see domain_get_user_domains()
 *
 * @param null $account
 *   Alternative account instance to fetch domains for.
 *   Defaults to NULL - the current user.
 *
 * @return mixed
 */
function _domain_menu_get_user_domains($account = NULL) {
  $user = $account ? $account : $GLOBALS['user'];
  $user_domains = &drupal_static(__FUNCTION__, array());
  if (!isset($user_domains[$user->uid])) {
    $user_domains[$user->uid] = domain_get_user_domains($user);
  }
  return $user_domains[$user->uid];
}

/**
 * Domain menu configurations accessor.
 *
 * @todo Refactor the storage to be outside of variables.
 *   It could get tricky with domain_conf module enabled.
 *
 * @param string $menu_name
 *   Menu name we are reading configurations for.
 *
 * @return array
 *   List of domain ids that are white-listed on the menu.
 */
function domain_menu_get_settings($menu_name) {
  return variable_get("domain_menu_{$menu_name}", array());
}

/**
 * Domain menu configurations mutator.
 *
 * @todo Refactor the storage to be outside of variables.
 *   It could get tricky with domain_conf module enabled.
 *   It's ok to be in a variable, as we can have it in features.
 *
 * @param string $menu_name
 *   Menu name we are setting configs for.
 * @param array $value
 *   List of domain ids to white-list for the menu.
 *
 * @return bool
 *   TRUE on success.
 */
function domain_menu_set_settings($menu_name, array $value) {
  variable_set("domain_menu_{$menu_name}", $value);
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Used to add white-listed domains for managing the menu.
 *
 * @param array $form
 *   Menu add / edit form definition.
 */
function domain_menu_form_menu_edit_menu_alter(&$form) {
  $form['domain'] = array(
    '#type' => 'fieldset',
    '#title' => t('Domain access options'),
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('domain_collapse_options', 0),
  );

  // Have a list of domains for the menu...
  $form['domain']['domains'] = array(
    '#required' => TRUE,
    '#type' => 'checkboxes',
    '#title' => t('Avalable on'),
    '#description' => t('Select which affiliates can access this menu.'),
    '#disabled' => !user_access('administer menu'),
    '#options' => call_user_func(function() {
      $result = array();
      foreach(domain_domains() as $domain) {
        $result[$domain['domain_id']] = $domain['subdomain'];
      }
      return $result;
    }),
    '#default_value' => call_user_func(function() use ($form) {
      $default = array();
      if (isset($form['menu_name']['#default_value'])) {
        $menu_name = $form['menu_name']['#default_value'];
        $default = domain_menu_get_settings($menu_name);
      }
      return $default;
    }),
  );

  // Allow delete access only to people with the global permission.
  $form['actions']['delete']['#access'] = user_access('administer menu');

  // Add our custom submit handler.
  array_unshift($form['#submit'], '_domain_menu_form_menu_edit_menu_alter_submit');
}

/**
 * Custom form submit callback.
 *
 * Used to persist the menu domain settings.
 *
 * @see domain_menu_form_menu_edit_menu_alter()
 *
 * @param array $form
 * @param array $form_state
 */
function _domain_menu_form_menu_edit_menu_alter_submit(array &$form, array &$form_state) {
  $menu_name = $form_state['values']['menu_name'];
  if ($value = $form_state['values']['domains']) {
    $values = array_filter(array_map('intval', $value));
    domain_menu_set_settings($menu_name, $values);
  }
}
